@0xe0c33bb359ddae62; # Unique file ID generated by `capnp id`

# Note that any o- prefixed field indicates a memory-address offset.
# E.g: In the Rule struct, oAfter = offset within table to the 'after' field.
#
# Additionally, List implies a managed corresponding 'length' element for the representation.
# Cap'n Proto automanages this.

# Annotations

annotation len16(field) :Text; # Denotes the field name to contain this field's length.
annotation len8(field) :Text;  # Denotes the field name to contain this field's length.
annotation fixedLen(field) :UInt8; # Denotes a constant length for the field's List.
annotation if(field) :Text;

# Basic types
using FourCC = UInt32; # Denotes a four-character code in ASCII, compressed into a single 32-bit value.  
                       # TODO: Is FourCC Little-endian or Big-endian?
using Offset = UInt32; # Denotes an address offset for use in memory-mapped loads.
using Char = UInt32; # Denotes a UTF-32 character.
using BitFlags16 = UInt16;  # Denotes a set of bit flags representing multiple booleans.
using VkeyCode = UInt16;    # Denotes a VKey value.

struct String32 { # Denotes a UTF-32-based string.
    len @0 :UInt16;
    c @1 :List(Char);
}

# struct String8 { 
#     c @0 :List(UInt8);
#     z @1 :UInt8 = 0;
# }

# Directory
struct DirEntry {
    name @0 :FourCC;
    offset @1 :Offset;  # Offset to the represented table.
    length @2 :UInt32;
    version @3 :UInt32;
}

struct Directory {
    entries @0 :List(DirEntry);
}

# Trie

annotation result(field) :Text; # Denotes the type represented by the 'result' field.

struct Trie {
    type @0 :UInt8;
    reserved @1 :UInt8;
    numEntries @2 :UInt16;
    result @3 :UInt32; # Offset to string, magic value (for string match success) or to rule (depending upon contextual use).
                     # 0 indicates transition node (no rule here)
    trieData :union {
        ordered @4 :List(OrderedTrie) $len16("numEntries");
        segmented @5 :List(SegmentedTrie) $len16("numEntries");
    }
}

struct OrderedTrie {
    c @0 :Char;
    o @1 :Offset; # Offset to next Trie node
}

struct SegmentedTrie {  # Run-length encoding style
    c @0 :Char; # First char
    offsets @1 :List(Offset); # Offset to next Trie node.
}

# Simple Transform
struct Rule {
    error @0 :Bool;
	oBefore @1 :Offset;
    oAfter @2 :Offset;  
	to @3 :String32;
    before @4 :Trie $result("Bool");
    after @5 :Trie $result("Bool");
}

struct Trns {
    settings @0 :UInt16;
    numRules @1 :UInt16;
	oOutputs @2 :Offset;
    t @3 :Trie $result("Offset"); # Rule
    outputs @4 :List(Rule) $len16("numRules");
}

# Final Transform
struct Trnf {
    numRules @0 :UInt16;
	oOutputs @1 :Offset;
    t @2 :Trie $result("Offset"); # Rule
    outputs @3 :List(Rule) $len16("numRules");
}

# Backspace Transform
struct Trnb {
    numRules @0 :UInt16;
	oOutputs @1 :Offset;
    t @2 :Trie $result("Offset"); # Rule
    outputs @3 :List(Rule) $len16("numRules");
}

# Reorder
struct OrderRule {
    struct Info {
        prebase @0 :Bool;
        tertiaryBase @1 :Bool;
        order @2 :Int8;
    }
    error @0 :Bool;
    iLen @1 :UInt8;
	oAfter @2 :Offset;
    order @3 :List(Info) $len8("iLen");
    before @4 :Trie $result("Bool");
    after @5 :Trie $result("Bool");
}

struct Trnr {
    numRules @0 :UInt16;
	oOutputs @1 :Offset;
    t @2 :Trie $result("Offset"); # Rule
    outputs @3 :List(OrderRule) $len16("numRules");
}

# KeyMaps
struct KeyMap {
    eModLen @0 :UInt8;
    modifiers @1 :UInt16;
    oEntries @2 :Offset;
    entriesLen @3 :UInt16;
    eModifiers @4 :Data $len8("eModLen");
    t @5 :Trie $result("FourCC");
    entries @6 :List(KmapEntry) $len16("entriesLen");
}

struct KmapEntry {
    to @0 :String32;
    multiLen @1 :UInt8;
    oLong @2 :Offset;
    longLen @3 :UInt8;
    oFlick @4 :Offset;
    #hint: :String32; # If doing longpress hints, what string signals to a user that the key has longpress options?
    multiTap @5 :List(String32) $len8("multiLen");
    longPress @6 :List(String32) $len8("longLen");
    flicks @7 :List(String32) $fixedLen(8) $if("oFlick");
}

struct Kmap {
    maps @0 :List(KeyMap);
}

struct LayerKey {
    #width :UInt16; # or should it be Float32? # Denotes the width of a key.
    iso @0 :FourCC; # The represented key ISO code.
    oHint @1 :Offset;
    cap @2 :String32; # The displayed key cap.
    hint @3 :String32; # The longpress hint, if it exists.
}

struct LayerRow {
    keys @0 :List(LayerKey);
}

struct LayerSwitch {
    oLayer @0 :Offset;
    iso @1: FourCC;
    layer @2 :String32;
}

struct Layer {
    modifier @0 :BitFlags16; # A set of bitflags corresponding to the modifier represented by the layer.
    rowsLen @1 :UInt8;
    switchesLen @2 :UInt8;
    vkeysLen @3 :UInt8;
    oSwitches @4 :Offset;
    rows @5 :List(LayerRow) $len8("rowsLen");
    switches @6 :List(LayerSwitch) $len8("switchesLen");
}

struct Layr {
    layers @0 :List(Layer);
}

struct Name {
    names @0 :List(String32);
}

struct Head {
    ver @0 :String32;
}

struct VkeyEntry {
    vkeyCode @0: VkeyCode;
    modifiers @1: BitFlags16;
}

struct PlatformVkeys {
    platId @0: FourCC; # 'windows', 'macosx' 
    t @1: Trie $result("Offset"); # to VkeyEntry
}

struct Vkey { # The main Vkey table.  Implicitly based on Windows 'en-us', with further defs here overriding said base.
    platforms @0 :List(PlatformVkeys);
}